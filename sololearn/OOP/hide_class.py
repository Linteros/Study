# Ключевая часть объектно-ориентированного программирования - это инкапсуляция,
# которая включает в себя упаковку связанных переменных и функций в
# один простой в использовании объект -- экземпляр класса.

# Связанное понятие - сокрытие данных, которое гласит, что детали реализации класса должны быть скрыты,
# и должен быть представлен чистый стандартный интерфейс для тех, кто хочет использовать класс.

# В других языках программирования это обычно делается с помощью приватных методов и атрибутов,
# которые блокируют внешний доступ к определенным методам и атрибутам класса.
#
# Философия Python немного отличается. Она часто выражается как "мы все здесь взрослые согласные люди,
# что означает, что вы не должны накладывать произвольные ограничения на доступ к частям класса.
# Следовательно, нет способов обеспечить, чтобы метод или атрибут были строго приватными.

# Однако, существуют способы отговорить людей от доступа к частям класса, например, указывая,
# что это деталь реализации и ее следует использовать на свой страх и риск.

# ---

# Слабо приватные методы и атрибуты имеют одно подчеркивание в начале.
#
# Это сигнализирует о том, что они приватные и их не следует использовать внешним кодом.
# Однако, это в основном только условность и не останавливает внешний код от доступа к ним.

class Queue:
    def __init__(self, contents):
        self._hiddenlist = list(contents)

    def push(self, value):
        self._hiddenlist.insert(0, value)

    def pop(self):
        return self._hiddenlist.pop(-1)

    def __repr__(self):
        return "Queue({})".format(self._hiddenlist)


queue = Queue([1, 2, 3])
print(queue)
queue.push(0)
print(queue)
queue.pop()
print(queue)
print(queue._hiddenlist)

# В приведенном выше коде атрибут _hiddenlist помечен как приватный,
# но к нему все равно можно получить доступ во внешнем коде.

# Магический метод __repr__ используется для строкового представления экземпляра.